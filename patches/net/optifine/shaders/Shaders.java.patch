--- a/net/optifine/shaders/Shaders.java
+++ b/net/optifine/shaders/Shaders.java
@@ -135,6 +135,7 @@
 import org.lwjgl.opengl.GL43;
 import org.lwjgl.opengl.GLCapabilities;
 import org.lwjgl.opengl.KHRDebug;
+import org.vivecraft.render.RenderPass;
 
 public class Shaders
 {
@@ -374,13 +375,13 @@
     public static final int MaxShadowColorBuffers = 2;
     public static final int MaxShadowDepthBuffers = 2;
     static int usedColorBuffers = 0;
-    static int usedDepthBuffers = 0;
+    public static int usedDepthBuffers = 0;
     static int usedShadowColorBuffers = 0;
     static int usedShadowDepthBuffers = 0;
     static int usedColorAttachs = 0;
     static int usedDrawBuffers = 0;
     static boolean bindImageTextures = false;
-    static ShadersFramebuffer dfb;
+    public static ShadersFramebuffer dfb;
     static ShadersFramebuffer sfb;
     private static int[] gbuffersFormat = new int[16];
     public static boolean[] gbuffersClear = new boolean[16];
@@ -574,6 +575,11 @@
     {
     }
 
+    //Vivecraft
+    static float[] sunPositionT = new float[4];
+    static float[] moonPositionT = new float[4];
+    //
+    
     private static ByteBuffer nextByteBuffer(int size)
     {
         ByteBuffer bytebuffer = bigBuffer;
@@ -942,6 +948,27 @@
         loadShaderPackResources();
         loadShaderPackDimensions();
         shaderPackOptions = loadShaderPackOptions();
+
+        //Vivecraft clean shader options
+        for (ShaderOption sh : shaderPackOptions) {
+        	System.out.println("Shader Option: " + sh.toString());
+        	if (sh.getName().toLowerCase().contains("motion_blur")) //seus
+        		sh.setValue("false");
+        	if (sh.getName().toLowerCase().contains("motionblur")) //bsl, UShader
+        		sh.setValue("false");
+        	if (sh.getName().toLowerCase().contains("dof")) //bsl
+        		sh.setValue("false");
+        	if (sh.getName().toLowerCase().contains("dirtyLens")) //bsl
+        		sh.setValue("false");
+        	if (sh.getName().toLowerCase().contains("lensflare")) //bsl
+        		sh.setValue("false");
+        	if (sh.getName().toLowerCase().contains("idle_hands")) //qol
+        		sh.setValue("false");
+        	if (sh.getName().toLowerCase().contains("taa")) //sildurs
+        		sh.setValue("false");
+        }
+        //
+
         loadShaderPackFixedProperties();
         loadShaderPackDynamicProperties();
         boolean flag3 = shaderPackLoaded != flag;
@@ -2557,6 +2584,8 @@
             }
 
             checkGLError("Shaders.init");
+
+            mc.vrRenderer.reinitFrameBuffers("Shaders Initialized");
         }
     }
 
@@ -4118,7 +4147,15 @@
         setProgramUniform1f(uniform_viewHeight, (float)renderHeight);
         setProgramUniform1f(uniform_near, 0.05F);
         setProgramUniform1f(uniform_far, (float)(mc.gameSettings.renderDistanceChunks * 16));
-        setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+        //Vivecraft
+        if(Minecraft.getInstance().currentPass == RenderPass.THIRD) {
+        	setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+        	setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+        }else {
+        	setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+        	setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+        }
+        //
         setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
         setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
         setProgramUniform3f(uniform_upPosition, upPosition[0], upPosition[1], upPosition[2]);
@@ -4549,8 +4586,9 @@
     {
         renderDisplayWidth = mc.getMainWindow().getFramebufferWidth();
         renderDisplayHeight = mc.getMainWindow().getFramebufferHeight();
-        renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
-        renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
+        renderWidth = Math.round((float)renderDisplayWidth);
+        renderHeight = Math.round((float)renderDisplayHeight);
+        System.out.println("Shaders Render Res: " + renderWidth + " x " + renderHeight);
         setupFrameBuffer();
     }
 
@@ -4667,9 +4705,10 @@
             }
         }
 
-        if (mc.getMainWindow().getFramebufferWidth() != renderDisplayWidth || mc.getMainWindow().getFramebufferHeight() != renderDisplayHeight)
+        if (mc.vrRenderer.reinitShadersFlag || mc.getMainWindow().getFramebufferWidth() != renderDisplayWidth || mc.getMainWindow().getFramebufferHeight() != renderDisplayHeight)
         {
             resize();
+            mc.vrRenderer.reinitShadersFlag  = false;
         }
 
         if (needResizeShadow)
@@ -4723,7 +4762,7 @@
 
             if (entity != null)
             {
-                isSleeping = entity instanceof LivingEntity && ((LivingEntity)entity).isSleeping();
+                isSleeping = false;//entity instanceof LivingEntity && ((LivingEntity)entity).isSleeping();
                 eyePosY = (float)activeRenderInfo.getProjectedView().getY();
                 eyeBrightness = mc.getRenderManager().getPackedLight(entity, partialTicks);
                 float f2 = (float)diffSystemTime * 0.01F;
@@ -4752,7 +4791,6 @@
 
                     if (livingentity.isPotionActive(Effects.NIGHT_VISION))
                     {
-                        GameRenderer gamerenderer = entityRenderer;
                         nightVision = GameRenderer.getNightVisionBrightness(livingentity, partialTicks);
                     }
 
@@ -4803,7 +4841,9 @@
         ((Buffer)previousModelView).position(0);
         ((Buffer)modelView).position(0);
         checkGLError("beginRender");
-        ShadersRender.renderShadowMap(entityRenderer, activeRenderInfo, 0, partialTicks, finishTimeNano);
+		// VIVECRAFT: Render shadow map once per frame instead of every damn pass
+		if (mc.currentPass == RenderPass.LEFT || mc.currentPass == RenderPass.THIRD || mc.currentPass == RenderPass.CAMERA)
+			ShadersRender.renderShadowMap(entityRenderer, entityRenderer.getActiveRenderInfo(), 0, partialTicks, finishTimeNano);
         mc.getProfiler().endSection();
         dfb.setColorTextures(true);
         setRenderStage(RenderStage.NONE);
@@ -4996,9 +5036,14 @@
         cameraPositionZ = d2 - (double)cameraOffsetZ;
         updateProjectionMatrix();
         Matrix4f matrix4f = matrixStackIn.getLast().getMatrix();
-        Matrix4f matrix4f1 = new Matrix4f(matrix4f);
-        matrix4f1.transpose();
-        matrix4f1.write(tempMat);
+        //Vivecraft - I do not know why this is necessary to fix shadows. It should be in stereo already.
+        MatrixStack mat = new MatrixStack();
+        mat.getLast().getMatrix().setIdentity();
+        mat.getLast().getMatrix().mul(matrix4f);
+        entityRenderer.applystereo(mc.currentPass, mat);
+        //
+        mat.getLast().getMatrix().transpose();
+        mat.getLast().getMatrix().write(tempMat);
         ((Buffer)modelView).position(0);
         modelView.put(tempMat);
         SMath.invertMat4FBFA((FloatBuffer)((Buffer)modelViewInverse).position(0), (FloatBuffer)((Buffer)modelView).position(0), faModelViewInverse, faModelView);
@@ -5151,13 +5196,24 @@
         Matrix4f matrix4f1 = new Matrix4f(matrix4f);
         matrix4f1.transpose();
         matrix4f1.write(tempMat);
+    	if(Minecraft.getInstance().currentPass == RenderPass.THIRD) {
+    		//Vivecraft
+    		SMath.multiplyMat4xVec4(sunPositionT, tempMat, sunPosModelView);
+    		SMath.multiplyMat4xVec4(moonPositionT, tempMat, moonPosModelView);
+    		System.arraycopy(shadowAngle == sunAngle ? sunPositionT : moonPosition, 0, shadowLightPosition, 0, 3);
+    		setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+    		setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+    		setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    		//
+    	}
+    	else {
         SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
         SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
         System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
         setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
         setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
         setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
-
+	}
         if (customUniforms != null)
         {
             customUniforms.update();
@@ -6296,7 +6352,7 @@
     private static void loadShaderPackResources()
     {
         shaderPackResources = new HashMap<>();
-
+        System.out.println("loadShaderPackResources " + shaderPackLoaded);
         if (shaderPackLoaded)
         {
             List<String> list = new ArrayList<>();
@@ -6329,6 +6385,7 @@
                         {
                             String s6 = properties.getProperty(s5);
                             shaderPackResources.put(s5, s6);
+                            System.out.println("put " + s5 + " " + s6);
                         }
                     }
                 }
